@model SecretaryHomeViewModel
@{
    ViewData["Title"] = "Secretary Home";
}

<h2>Bine ai venit!</h2>

<p>Aici poti viziona cataloagele cu studenti pentru fiecare curs.</p>

<div class="container">
    <div class="search-bars">
        <input type="text" id="professorSearch" placeholder="Cauta dupa profesor..." onkeyup="filterCourses()">
        <input type="text" id="courseSearch" placeholder="Cauta dupa curs..." onkeyup="filterCourses()">
        <input type="text" id="studentSearch" placeholder="Contin studentul..." onkeyup="filterCourses()">
    </div>

    <h2>Cursuri și profesori</h2>

    <div id="coursesContainer">
        @foreach (var course in Model.Courses)
        {
            <div class="course-container" data-professor-name="@course.ProfessorName" data-course-name="@course.CourseName">
                <h3 class="course-title">@course.CourseName</h3>
                <div class="professor-info">
                    <p><strong>Profesor: </strong>@course.ProfessorName</p>
                </div>
                <ul class="student-list">
                    @foreach (var student in course.Students)
                    {
                        <li class="student-item" data-student-name="@student.FirstName @student.LastName">@student.FirstName @student.LastName - @(student.Grade.HasValue ? student.Grade.Value.ToString() : "N/A")</li>
                    }
                </ul>
                <button class="generate-pdf-button" data-course-id="@course.CourseId">Generează PDF</button>
            </div>
        }
    </div>
</div>

<style>
    .search-bars {
        margin-bottom: 20px;
    }

        .search-bars input {
            margin-right: 10px;
            padding: 10px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            width: 220px;
        }

    .professor-info {
        margin-top: 10px;
    }

        .professor-info p {
            margin: 0;
        }

    .course-container {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background-color: #fafafa;
        max-width: 720px; /* Setează lățimea maximă a containerului */
        margin-right: auto;
    }

    .course-title {
        font-size: 1.5em;
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
        border-bottom: 1px solid #e0e0e0;
        padding-bottom: 5px;
    }

    .student-list {
        margin-top: 10px;
        list-style-type: none;
        padding-left: 0;
    }

    .student-item {
        padding: 8px;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        justify-content: space-between;
    }

        .student-item:last-child {
            border-bottom: none;
        }

        .student-item:nth-child(odd) {
            background-color: #f0f0f0;
        }

        .student-item span {
            display: inline-block;
            width: 45%;
        }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>

<script>
    function filterCourses() {
        var professorInput = document.getElementById('professorSearch').value.toLowerCase();
        var courseInput = document.getElementById('courseSearch').value.toLowerCase();
        var studentInput = document.getElementById('studentSearch').value.toLowerCase();
        var courses = document.querySelectorAll('.course-container');

        courses.forEach(function (course) {
            var professorName = course.getAttribute('data-professor-name').toLowerCase();
            var courseName = course.getAttribute('data-course-name').toLowerCase();

            var studentItems = course.querySelectorAll('.student-item');
            var studentMatch = studentInput === ''; // Asumăm că există o potrivire dacă nu s-a introdus nimic pentru student

            studentItems.forEach(function (student) {
                var studentName = student.getAttribute('data-student-name').toLowerCase();
                if (studentName.includes(studentInput)) {
                    studentMatch = true;
                }
            });

            if (professorName.includes(professorInput) && courseName.includes(courseInput) && studentMatch) {
                course.style.display = 'block';
            } else {
                course.style.display = 'none';
            }
        });
    }
</script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const { jsPDF } = window.jspdf;

        document.querySelectorAll('.generate-pdf-button').forEach(button => {
            button.addEventListener('click', function () {
                const courseContainer = this.closest('.course-container');
                const courseName = courseContainer.dataset.courseName;
                const professorName = courseContainer.dataset.professorName;

                const doc = new jsPDF();
                doc.setFontSize(20);
                doc.text(`Catalog pentru materia - ${courseName}`, doc.internal.pageSize.getWidth() / 2, 10, { align: 'center' });

                doc.setFontSize(14);
                doc.text(`Profesor: ${professorName}`, doc.internal.pageSize.getWidth() / 2, 20, { align: 'center' });

                // Lista de studenți cu spațiu mărit
                const studentItems = courseContainer.querySelectorAll('.student-item');
                let yPosition = 40;
                let studentIndex = 1;
                studentItems.forEach(item => {
                    doc.text(`${studentIndex}. ${item.textContent}`, 10, yPosition);
                    yPosition += 10;
                    studentIndex += 1;
                });

                doc.save(`Catalog-${courseName}.pdf`);
            });
        });
    });
</script>
